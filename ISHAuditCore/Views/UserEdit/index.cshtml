@using ISHAuditCore.Models
@using Newtonsoft.Json
@model ISHAuditCore.Controllers.UserEditController
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@{
    ViewBag.Title = "修改人員帳號";
}

@section css{
    <link rel="stylesheet" href="~/css/loading.css">
    <style>
        .size-text {
            font-size: 16px; /* 調整字體大小 */
        }
        .ag-theme-alpine .ag-select {
            font-size: 30px; /* 調整字體大小 */
        }
    </style>
}

@section js{

}

@section page_title{

}

@section location{
<li class="breadcrumb-item" xmlns="http://www.w3.org/1999/html">@Html.ActionLink("首頁", "Index", "Home")</li>
<li class="breadcrumb-item active">@Html.ActionLink("登入", "Index", "Login")</li>
}


@section scripts
{
    <script>
        // 將 JSON 字符串轉換為 JavaScript 對象
        var enterprises = JSON.parse(@Html.Raw(JsonConvert.SerializeObject(ViewBag.EnterpriseJson)));
        // 提取企業名稱
        const enterpriseNames = enterprises.map(ent => ent.Name);
        
        // 動態提取公司名稱
        function getCompanyNames(enterpriseName) {
            const enterprise = enterprises.find(ent => ent.Name === enterpriseName);
            return enterprise ? enterprise.Child.map(company => company.Name) : [];
        }

        // 動態提取工廠名稱
        function getFactoryNames(companyName, enterpriseName) {
            const enterprise = enterprises.find(ent => ent.Name === enterpriseName);
            if (!enterprise) return [];
            const company = enterprise.Child.find(comp => comp.Name === companyName);
            return company ? company.Child.map(factory => factory.Name) : [];
        }
        
        let gridApi;
        // Grid配置
        const gridOptions = {
            localeText: AG_GRID_LOCALE_TW,
            rowData: [],
            columnDefs: [
                { headerName: "排序", field: "id", cellClass: 'size-text', width: 100,editable: false },
                { headerName: "帳號", field: "username", cellClass: 'size-text', width: 100,editable: false },
                { headerName: "名稱", field: "nickname", cellClass: 'size-text', width: 150,editable: true },
                {
                    headerName: "企業",
                    field: "enterpriseName",
                    cellClass: 'size-text',
                    width: 200,
                    editable: true,
                    cellEditor: 'agSelectCellEditor', // 使用下拉選單
                    cellEditorParams: function(params) {
                        params.data.companyName = '';
                        params.data.factoryName = '';
                        return {
                            values: ['--請選擇--'].concat(enterpriseNames), // 提供所有企業選項
                            
                        };
                    },
                    //onCellValueChanged: function(params) {
                        //params.data.companyName = ''; // 清空公司名稱
                        //params.data.factoryName = ''; // 清空工廠名稱
                        // 當企業選擇改變時，更新對應的公司選項
                    //    const selectedEnterprise = params.data.enterpriseName;
                        //const companyOptions = getCompanyNames(selectedEnterprise);
                    //    const companyOptions = ['--請選擇--'].concat(getCompanyNames(selectedEnterprise));
                    //    gridOptions.api.getColumnDef('companyName').cellEditorParams.values = companyOptions;
                    //    gridOptions.api.refreshCells({ force: true, columns: ['companyName', 'factoryName'] });
                    //}
                },
                {
                    headerName: "公司",
                    field: "companyName",
                    cellClass: 'size-text',
                    width: 200,
                    editable: true,
                    cellEditor: 'agSelectCellEditor',
                    cellEditorParams: function(params) {
                        if (params.data.enterpriseName) {
                            params.data.factoryName = '';
                            return {
                                values: ['--請選擇--'].concat(getCompanyNames(params.data.enterpriseName)) // 假設這是公司選項
                            };
                        } else {
                            return {
                                values: ['--請選擇--'] // 如果 enterprise 沒有值，則不顯示選項
                            };
                        }
                    }
                },
                {
                    headerName: "工廠",
                    field: "factoryName",
                    cellClass: 'size-text',
                    width: 200,
                    editable: true,
                    cellEditor: 'agSelectCellEditor',
                    cellEditorParams: function(params) {
                        if (params.data.companyName) {
                            return {
                                values: ['--請選擇--'].concat(getFactoryNames(params.data.companyName, params.data.enterpriseName))
                            };
                        } else {
                            return {
                                values: ['--請選擇--']
                            };
                        }
                    }
                },
                {
                    headerName: "權限",
                    headerClass: 'center-header',
                    children: [
                        {
                            headerName: "督導權限",
                            field: "authority",
                            cellClass: 'size-text',
                            width: 150,
                            editable: true, // 允許編輯
                            cellEditor: 'agSelectCellEditor', // 使用下拉選單作為編輯器
                            cellEditorParams: {
                                values: ['admin', 'power', 'operator', 'none'] // 欲顯示的下拉選單選項
                            },
                            valueGetter: (params) => {
                                return getAuthorityValue(params.data.authority, 'Audit');
                            },
                            valueSetter: (params) => {
                                // 更新選擇後的值
                                let authorityObj = JSON.parse(params.data.authority);
                                authorityObj.Audit = params.newValue;
                                params.data.authority = JSON.stringify(authorityObj);
                                return true;
                            }
                        },
                        {
                            headerName: "績效指標權限",
                            field: "authority",
                            cellClass: 'size-text',
                            width: 150,
                            editable: true, // 允許編輯
                            cellEditor: 'agSelectCellEditor', // 使用下拉選單作為編輯器
                            cellEditorParams: {
                                values: ['admin', 'power', 'operator', 'none'] // 欲顯示的下拉選單選項
                            },
                            valueGetter: (params) => {
                                return getAuthorityValue(params.data.authority, 'KPI');
                            },
                            valueSetter: (params) => {
                                // 更新選擇後的值
                                let authorityObj = JSON.parse(params.data.authority);
                                authorityObj.KPI = params.newValue;
                                params.data.authority = JSON.stringify(authorityObj);
                                return true;
                            }
                        },
                        {
                            headerName: "系統權限",
                            field: "authority",
                            cellClass: 'size-text',
                            width: 150,
                            editable: true, // 允許編輯
                            cellEditor: 'agSelectCellEditor', // 使用下拉選單作為編輯器
                            cellEditorParams: {
                                values: ['admin', 'none'] // 欲顯示的下拉選單選項
                            },
                            valueGetter: (params) => {
                                return getAuthorityValue(params.data.authority, 'Sys');
                            },
                            valueSetter: (params) => {
                                // 更新選擇後的值
                                let authorityObj = JSON.parse(params.data.authority);
                                authorityObj.Sys = params.newValue;
                                params.data.authority = JSON.stringify(authorityObj);
                                return true;
                            }
                        },
                        {
                            headerName: "組織權限",
                            field: "authority",
                            cellClass: 'size-text',
                            width: 150,
                            editable: true, // 允許編輯
                            cellEditor: 'agSelectCellEditor', // 使用下拉選單作為編輯器
                            cellEditorParams: {
                                values: ['admin','factory','manager','enterprise','none'] // 欲顯示的下拉選單選項
                            },
                            valueGetter: (params) => {
                                return getAuthorityValue(params.data.authority, 'Org');
                            },
                            valueSetter: (params) => {
                                // 更新選擇後的值
                                let authorityObj = JSON.parse(params.data.authority);
                                authorityObj.Org = params.newValue;
                                params.data.authority = JSON.stringify(authorityObj);
                                return true;
                            }
                        }
                    ]
                },
                {
                    headerName: "修改密碼", width: 150,
                    cellRenderer: function (params) {
                        return `<button type='button' onclick='change_password(${params.data.id});' class='btn btn-success'><b>更改密碼</b></button>`;
                    }
                },
                {
                    headerName: "刪除", width: 150,
                    cellRenderer: function (params) {
                        return `<button type='button' onclick='delete_data(${params.data.id}, "${params.data.username}");' class='btn btn-danger'><b>刪除資料</b></button>`;
                    }
                }
            ],
            singleClickEdit: true,
            onCellValueChanged: onCellValueChanged, // 綁定事件
            defaultColDef: {
                resizable: true,
                sortable: true,
            },
            domLayout: 'autoHeight', // 自適應高度
            pagination: true, // 開啟分頁功能
            paginationPageSize: 15, // 每頁顯示 10 條數據
            rowSelection: 'multiple', // 啟用行選擇
            overlayNoRowsTemplate: '<span class="ag-overlay-loading-center">Not found</span>', // 無數據顯示模板
            onGridReady: function(params) {
                gridApi = params.api; // 獲取 gridApi
                get();
            },
            getRowId: function(params) {
                return params.data.id; // 假設 'id' 是唯一識別符
            }
        };
        
        $(document).ready(function () {
        
            const gridDiv = document.querySelector('#myGrid');
            gridApi = new agGrid.Grid(gridDiv, gridOptions); 
            
            document.addEventListener('DOMContentLoaded', function () {
                const gridDiv = document.querySelector('#myGrid');
                new agGrid.Grid(gridDiv, gridOptions);
            });
            
            // 調試輸出數據
            console.log("Enterprises:", enterprises);
          
        });
    </script>
}

<!DOCTYPE html>
<html>
<head>
    <title>UserEdit</title>

</head>
<body>

<section>
    <div class="card card-primary">
        <div class="card-header">
            <h3 class="card-title">修改人員帳號</h3>
        </div>
        <div>
            <div id="myGrid" class="card-body ag-theme-quartz" style="width: 100%;"></div>
        </div>
    </div>
</section>

<script>

    function get() {
        $.ajax({
            url: '/UserEdit/GetDataFromDatabase',
            type: 'GET',
            dataType: 'json',
            success: function (data) {
                if (gridApi) { // 確保 gridApi 存在
                    gridApi.setRowData(data); // 使用 gridApi
                    console.log("data",data)

                } else {
                    console.log("gridApi is not initialized yet");
                }
            },
            error: function (error) {
                console.log("Error fetching data", error);
            }
        });
    }
    function getAuthorityValue(authorityString, key) {
        try {
            const data = JSON.parse(authorityString);
            return data[key] || '無'; // 若沒有對應的權限值，顯示 '無'
        } catch (e) {
            return 'Invalid JSON'; // 若解析失敗，顯示錯誤
        }
    }

    function onCellValueChanged(event) {
        if (event.oldValue !== event.newValue) {
            console.log('Cell value changed from', event.oldValue, 'to', event.newValue);
            console.log('id', event.data.id, ' field',event.colDef.field, ' value',event.newValue );
            console.log(event.data.authority);
            let valueToSend;
            if (event.colDef.field === "authority") {
                valueToSend = event.data.authority; // Use the full authority object
            } else {
                valueToSend = event.newValue; // For non-authority fields, use the new value
            }
            $.ajax({
                url: '/UserEdit/UpdateUserField',
                type: 'POST',
                data: {
                    id: event.data.id,
                    field: event.colDef.field, // 被修改的字段
                    value: valueToSend      // 新值
                },
                success: function (response) {
                    Toast.fire({
                        icon: 'success',
                        title: '修改成功'
                    });
                },
                error: function (error) {
                    Toast.fire({
                        icon: 'error',
                        title: '修改失敗'
                    });
                }
            });
        }
    }

    function change_password(id){
      $("#remark_modal_password").modal('show');
      $("#item_password").val(id)
    }

    function send_change_password() {
        block();
        $.ajax({
            url: '/UserEdit/Newpassword',
            type: "post",
            data: {id:$("#item_password").val(),password: $("#password").val() },
            dataType: "json",
            success: function (data) {
                $("#jsGrid").jsGrid({data:data});
                unblock();
                $("#remark_modal_password").modal('hide');
                if (data.error) {
                    // 顯示錯誤訊息
                    alert(data.error);
                } else if (data.message) {
                    // 顯示成功訊息
                    alert(data.message);
                }

            },
            error: function (XMLHttpRequest, textStatus) {
                unblock();
                $("#remark_modal_password").modal('hide');
                Toast.fire({
                    icon: 'error',
                    title: '儲存失敗'
                });
            }
        });
    }

    function change_authority(id){
      $("#remark_modal_authority").modal('show');
      $("#item_authority").val(id)
    }

    function send_change_authority() {
        block();
        $.ajax({
            url: '/UserEdit/Newauthority',
            type: "post",
            data: {id:$("#item_authority").val(),Audit:$("#Audit").val(),KPI:$("#KPI").val(),Sys:$("#Sys").val(),Org:$("#Org").val() },
            dataType: "json",
            success: function (data) {
                gridApi.setRowData(data);
                unblock();
                $("#remark_modal_authority").modal('hide');
                if (data.error) {
                    // 顯示錯誤訊息
                    alert(data.error);
                } else if (data.message) {
                    // 顯示成功訊息
                    alert(data.message);
                }
                Toast.fire({
                    icon: 'success',
                    title: '儲存成功'
                });
            },
            error: function (XMLHttpRequest, textStatus) {
                unblock();
                $("#remark_modal_authority").modal('hide');
                Toast.fire({
                    icon: 'error',
                    title: '儲存失敗'
                });
            }
        });
    }

    function delete_data(id,username) {
        const confirmDelete = confirm(`確定要刪除這些資料嗎？\n\n帳號: ${username}`);

        // 如果用戶點擊「確定」，則執行刪除操作
        if (confirmDelete) {
            $.ajax({
                url: '/UserEdit/DeleteData', // 替換為實際的後端API
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify([id]), // 將選中的 ID 以 JSON 格式發送
                success: function(response) {
                    alert(`資料已被刪除。\n刪除的帳號: ${username}`);
                    // 刪除成功後，刷新表格數據或移除選中的行
                    gridOptions.api.applyTransaction({ remove: [{ id: id }] });
                },
                error: function(error) {
                    console.log('刪除失敗', error);
                    alert('刪除過程中出現錯誤，請稍後再試。');
                }
            });

        }
    }

</script>
@* 更改密碼 *@
<div class="modal fade" id="remark_modal_password">
    <div class="modal-dialog">
        <div class="modal-content bg-default">
            <div class="modal-header">
                <h4 class="modal-title">請輸入新的密碼</h4>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="input-group mb-3">
                        <input id="item_password" type="hidden"/>
                        <input type="password" class="form-control" id="password" name="password" placeholder="Password">
                        <div class="input-group-append">
                            <div class="input-group-text">
                                <span class="fas fa-lock"></span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">關閉</button>
                <button type="button" class="btn btn btn-primary" onclick="send_change_password()"> 保存 </button>
            </div>
        </div>
    </div>
</div>
</body>
</html>